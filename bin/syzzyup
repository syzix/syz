
# Copyright (C) 2012 Kevin Pulo.
#
# This file is part of syz.
# 
# syz is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# syz is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with syz.  If not, see <http://www.gnu.org/licenses/>.


# this is suitable for bash4+ only...

# plus make this safe to rerun at any time - reruns *must* *do* *NOTHING*
# then /shbang can run this, just in case (maybe)

#echo $BASH_SOURCE
#. syzlib

syz_version=0.1.1

{ [ -e /sw/syzix/noarch/syz/$syz_version/bin/syzlib ] && . /sw/syzix/noarch/syz/$syz_version/bin/syzlib ; } || { [ -e /sw/syzix/hostdep/noarch/syz/$syz_version/bin/syzlib ] && . /sw/syzix/hostdep/noarch/syz/$syz_version/bin/syzlib ; } || { echo "syzzyup: Error: cannot source syzlib" 1>&2 ; exit 1; }



#NATIVE_MACH="${NATIVE_MACH:-$(uname -m)}"
#export NATIVE_MACH
#
#NATIVE_KERNEL="${NATIVE_KERNEL:-$(uname -s)}"
#NATIVE_KERNEL="${NATIVE_KERNEL,,}"
#export NATIVE_KERNEL
#
#NATIVE_ARCH="${NATIVE_ARCH:-$NATIVE_MACH-$NATIVE_KERNEL}"
#export NATIVE_ARCH
#
#SHORT_HOSTNAME="${SHORT_HOSTNAME:-${HOSTNAME%%.*}}"
#export SHORT_HOSTNAME
#
#SW="${SW:-sw}"


#shopt -s extglob
#
#
#function envvar_unset {
#	[ x"${!1-unset}" = x"unset" ]
#}
#
#function envvar_unset_or_empty {
#	[ x"${!1:-unset_or_empty}" = x"unset_or_empty" ]
#}
#
#function envvar_set {
#	[ x"${!1+set}" = x"set" ]
#}
#
#function envvar_set_or_nonempty {
#	[ x"${!1:+set_or_nonempty}" = x"set_or_nonempty" ]
#}
#
#function parse-path {
#	local delim=:
#	if [ x"$1" = x"-d" ]; then
#		delim="$2"
#		shift 2
#	fi
#	local old_IFS="$IFS"
#	IFS="$delim"
#	eval "$1=("$2")"
#	local rc="$?"
#	IFS="$old_IFS"
#	return "$rc"
#}
#
#function append-path {
#	local delim=:
#	if [ x"$1" = x"-d" ]; then
#		delim="$2"
#		shift 2
#	fi
#	local p="${2//+(\/)//}"
#	case "${!1}" in
#		*"$delim$p$delim"*|"$p$delim"*|*"$delim$p"|"$p")
#			;;
#		*)
#			#echo "$1+='${!1:+:}$p'"
#			eval "$1+='${!1:+$delim}$p'"
#			export $1
#			#echo "$1=${!1}"
#			;;
#	esac
#}
#
#function prepend-path {
#	local delim=:
#	if [ x"$1" = x"-d" ]; then
#		delim="$2"
#		shift 2
#	fi
#	local p="${2//+(\/)//}"
#	case "${!1}" in
#		*"$delim$p$delim"*|"$p$delim"*|*"$delim$p"|"$p")
#			;;
#		*)
#			#echo "$1='$p${!1:+:${!1}}'"
#			eval "$1='$p${!1:+$delim${!1}}'"
#			export $1
#			#echo "$1=${!1}"
#			;;
#	esac
#}


#if envvar_unset_or_empty SYZIX_ARCHS; then
#	append-path SYZIX_ARCHS "noarch"
#	append-path SYZIX_ARCHS "$NATIVE_ARCH"
#fi
#
#parse-path syzix_archs "$SYZIX_ARCHS"
#
#
#if envvar_unset_or_empty SYZIX_REPO_BASES; then
#	append-path SYZIX_REPO_BASES "syzix"
#	# FIXME: eventually, split the "syzix" repo into a few main repos...
#	#append-path SYZIX_REPO_BASES "syzix/base"
#	#append-path SYZIX_REPO_BASES "syzix/testing"
#	#append-path SYZIX_REPO_BASES "syzix/unfree"
#	#append-path SYZIX_REPO_BASES "syzix/extra"
#fi
#
#parse-path syzix_repo_bases "$SYZIX_REPO_BASES"
#
#
#
#if envvar_unset_or_empty SYZIX_REPOS; then
#	for i in "${repo_bases[@]}"; do
#		append-path SYZIX_REPOS "/$HOME/$SW/host/$SHORT_HOSTNAME/$i"
#		append-path SYZIX_REPOS "/$HOME/$SW/$i"
#		append-path SYZIX_REPOS "/$SW/host/$SHORT_HOSTNAME/$i"
#		append-path SYZIX_REPOS "/$SW/$i"
#	done
#	parse-path syzix_repos "$SYZIX_REPOS"
#	for i in "${repos[@]}"; do
#		append-path SYZIX_REPOS "$i"-hostdep
#	done
#fi
#
#parse-path syzix_repos "$SYZIX_REPOS"


#function find_standard_program {
#	program="$1"
#	shift
#	if ! type "$program" > /dev/null 2>&1; then
#		local f=""
#		for repo in "${repos[@]}"; do
#			for arch in "$NATIVE_ARCH" noarch; do
#				for pkgname; do
#					if [ -x "$repo/$arch/$pkgname/default/bin/$program" ]; then
#						f="$repo/$arch/$pkgname/default/bin"
#						break
#					fi
#				done
#			done
#		done
#		if [ x"$f" = x"" ]; then
#			echo "Error: Unable to find a suitable $program"
#			return 1
#		else
#			prepend-path PATH "$f"
#		fi
#	fi
#}
#
#find_standard_program modulecmd modules || return 1
#find_standard_program syzcmd syz || return 1
#find_standard_program tclsh tcl || return 1


#declare -A type_{envvar,sep,loc,mod}
#
#function has_program {
#	type "$1" > /dev/null 2>&1
#}
#
#type_envvar[program]=PATH
#type_sep[program]=:
#type_loc[program]=bin
#type_mod[program]=prepend
#
#function has_tcl_package {
#	#cat <<-EOF
#	#has_program tclsh && tclsh <(echo 'exit [catch {package require '"$1"'}]')
#	#EOF
#	has_program tclsh && tclsh <(echo 'exit [catch {package require '"$1"'}]')
#}
#
#type_envvar[tcl_package]=TCLLIBPATH
#type_sep[tcl_package]=" "
#type_loc[tcl_package]=lib/tcl
#type_mod[tcl_package]=prepend
#
#
#function resolve_necessary {
#	local type="$1"
#	shift
#	local object="$1"
#	shift
#	if ! has_"$type" "$object"; then
#		for repo in "${repos[@]}"; do
#			for arch in "${archs[@]}"; do
#				for pkgname; do
#					local v="${type_envvar[$type]}"
#					local orig="${!v}"
#					"${type_mod[$type]}"-path -d "${type_sep[$type]}" "${type_envvar[$type]}" "$repo/$arch/$pkgname/default/${type_loc[$type]}"
#					if has_"$type" "$object"; then
#						return 0
#					fi
#					eval "${type_envvar[$type]}"'="$orig"'
#				done
#			done
#		done
#		echo "Error: Unable to find necessary $type: $object"
#		return 1
#	fi
#	return 0
#}


resolve_necessary program modulecmd modules || return 1
resolve_necessary program syzcmd syz || return 1
resolve_necessary program tclsh tcl || return 1

resolve_necessary tcl_package modext modext || return 1


#find_standard_program modulecmd modules Modules || return 1
#find_standard_program syzcmd syz || return 1
#find_standard_program tclsh tcl || return 1


# only do this if there is not already a modext in $TCLLIBPATH.
# Modules's --with-autoload-path causes $TCLLIBPATH to be completely ignored.
# So we have to do it this way instead.
# We ought to check the /sw/syzix-hostdep repo as well, but since modext is
# noarch (which has no *-hostdep repos), we can be lazy and skip it.
# Note that $TCLLIBPATH is space separated.
#if ! tclsh <(echo 'exit [catch {package require modext}]'); then
#	TCLLIBPATH="/sw/syzix/noarch/modext/default/lib/tcl${TCLLIBPATH:+ $TCLLIBPATH}"
#	export TCLLIBPATH
#fi


if envvar_unset LOADEDMODULES; then
	LOADEDMODULES=""
	export LOADEDMODULES
fi


if envvar_unset MODULEPATH; then
	MODULEPATH=""
	export MODULEPATH
fi

for repo in "${syzix_repos[@]}"; do
	for arch in "${syzix_archs[@]}"; do
		i="$repo/$arch"
		if [ -d "$i" -a -r "$i" -a -x "$i" ]; then
			append-path MODULEPATH "$i/.sf"
		fi
	done
done

#module() { eval `modulecmd bash "$@"`; }
#export -f module
##eval $(modulecmd bash load modext Modules)
##eval $(modulecmd bash load modext essentials)
##module load modext essentials
## shouldn't be necessary to explicitly load modext first, since
## the temporary $TCLLIBPATH above should allow the essentials module
## to find modext.
#module load essentials
##module load modext

# FIXME: only do this if there isn't already a syz function
# No, that is wrong.
# Do it always.
#case "$(type -t syz)" in
#	""¦file)
#		syz() { eval `syzcmd bash "$@"`; }
#		export -f syz
#		;;
#esac
syz() { eval `syzcmd bash "$@"`; }
export -f syz

if envvar_set USE_TRADITIONAL_MODULE_COMMAND; then
	module() { syz "$@"; }
	export -f module
fi

# FIXME: once syzzyup is called by the syz syzfile (using legacy-script) (to
# handle using "syz swap" to change syz versions), then this must only be done
# when syzzyup is NOT being called in this case.
#syz ensure syz/$syz_version
syz load syz/$syz_version

