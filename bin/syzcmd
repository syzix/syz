#!/bin/bash
# FIXME: use #!/shbang bash

# Copyright (C) 2012 Kevin Pulo.
#
# This file is part of syz.
# 
# syz is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# syz is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with syz.  If not, see <http://www.gnu.org/licenses/>.

. shwrapnel || { echo "shwrapnel: Error: cannot source shwrapnel" 1>&2 ; exit 1; }

shwrapnel set_real_cmd modulecmd

basedir=""
version=""
pkgname=""
pkgversion=""

function get_basedir {
	basedir="$(shwrapnel run "$1" show "$2" 2>&1 | sed -n -e 's, $,,' -e 's,^setenv\s\+[A-Za-z0-9_]\+_BASE\s\+,,p')"
}

function get_version {
	get_basedir "$@"
	version="${basedir##*/}"
}

function get_pkgname {
	get_version "$@"
	basedir="${basedir%/$version}"
	pkgname="${basedir##*/}"
}

function get_pkgversion {
	get_pkgname "$@"
	pkgversion="$pkgname/$version"
}


# FIXME: handle any options that are given (eg. -t, -v, -s, ...)

if [ "$2" = "basedir" ]; then
	get_basedir "$1" "$3"
	echo -n "echo '$basedir';"

elif [ "$2" = "syzfile" ]; then
	get_basedir "$1" "$3"
	echo -n "echo '$basedir/syzfile';"

elif [ "$2" = "pkgversion" ]; then
	get_pkgversion "$1" "$3"
	echo -n "echo '$pkgversion';"

elif [ "$2" = "version" ]; then
	get_version "$1" "$3"
	echo -n "echo '$version';"

elif [ "$2" = "pkgname" ]; then
	get_pkgname "$1" "$3"
	echo -n "echo '$pkgname';"

elif [ "$2" = "show" ]; then
	if [ "$3" = "-r" -o "$3" = "--raw" ]; then
		get_basedir "$1" "$4"
		echo "cat '$basedir'/syzfile;"
	else
		shwrapnel launch
	fi

elif [ "$2" = "cd" ]; then
	if [ $# -eq 2 ]; then
		# The user has done "syz cd", probably absent-mindedly trying to get back to their home dir.
		echo "cd"
		exit 0
	fi
	if [ "$3" = - ]; then
		# Another likely brainfart.
		echo "cd -"
		exit 0
	fi

	get_basedir "$@"
	if [ "$basedir" = "" ]; then
		echo "syzcmd: Error: \"$3\" not found" 1>&2
		exit 1
	fi
	if [ $# -eq 4 ]; then
		basedir="$basedir/$4"
		if [ ! -d "$basedir" ]; then
			if [ ! -e "$basedir" ]; then
				echo "syzcmd: Error: \"$basedir\" not found" 1>&2
				exit 1
			else
				echo "syzcmd: Error: \"$basedir\" not a directory" 1>&2
				exit 1
			fi
		fi
	fi
	echo "cd $basedir"

elif [ "$2" = "ensure" ]; then
	# Like soft-prereq.
	# If already loaded, do nothing.
	# Otherwise, load the default version.
	old_IFS="$IFS"
	IFS=:
	declare -a loadedmodules=($LOADEDMODULES)
	IFS="$old_IFS"

	shelltype="$1"
	shift 2
	declare -a need_to_load=()
	for ensure; do
		okay=n
		for loadedmodule in "${loadedmodules[@]}"; do
			loadedpkg="${loadedmodule%/*}"
			if [ "$loadedmodule" = "$ensure" ]; then
				# is exactly loaded, no problem.
				okay=y
				break
			elif [ "$loadedpkg" = "$ensure" ]; then
				# also fine
				okay=y
				break
			fi
		done
		if [ $okay = n ]; then
			# No good, so load $ensure
			need_to_load+=("$ensure")
		fi
	done

	if [ "${#need_to_load[@]}" -gt 0 ]; then
		shwrapnel launch "$shelltype" load "${need_to_load[@]}" 
	fi

	exit 0

else
	shwrapnel launch

fi

